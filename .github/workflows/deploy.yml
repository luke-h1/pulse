name: Deploy
on:
  push:
    branches: [dev]
env:
  NODE_VERSION: 18.16.0
  PNPM_VERSION: 8.6.0

jobs:
  test:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Install moreutils
        run: sudo apt install moreutils
        
      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off            

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: pnpm i

      - name: Terraform server
        run: |
          cd terraform/server && terraform init
          make fmt-server
          make validate-server
          make plan-server
          make apply-server
        env:
            TF_VAR_redis_url: ${{ secrets.REDIS_URL }}
            TF_VAR_db_url: ${{ secrets.DATABASE_URL }}
            TF_VAR_session_secret: ${{ secrets.SESSION_SECRET }}
            TF_VAR_cloudinary_secret: ${{ secrets.CLOUDINARY_SECRET }}
            TF_VAR_image_location: ${{ secrets.ECR_REPO }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform frontend
        run: |
          cd terraform/frontend && terraform init
          make fmt-frontend
          make validate-frontend
          make plan-frontend
          make apply-frontend
        env:
            TF_VAR_image_location: ${{ secrets.ECR_REPO }}
            TF_VAR_public_cloudinary_cloud_name: ${{ secrets.PUBLIC_CLOUDINARY_CLOUD_NAME }}
            TF_VAR_public_pulse_api_url: ${{ secrets.PUBLIC_PULSE_API_URL }}
            TF_VAR_public_url: ${{ secrets.FRONTEND_PUBLIC_URL }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform admin
        run: |
          cd terraform/admin && terraform init
          make fmt-admin
          make validate-admin
          make plan-admin
          make apply-admin
        env:
            TF_VAR_image_location: ${{ secrets.ECR_REPO }}
            TF_VAR_public_pulse_api_url: ${{ secrets.PUBLIC_PULSE_API_URL }}
            TF_VAR_public_url: ${{ secrets.ADMIN_PUBLIC_URL }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push server image
        run: | 
           - apk add --no-cache python3
           - pip3 install awscli
           - docker build -t ${{ secrets.ECR_REPO }}:latest -f ./server/Dockerfile .
           - $(aws ecr get-login-password --region us-east-1 --no-include-email)
           - docker push ${{ secrets.ECR_REPO }}:latest
           - docker tag ${{ secrets.ECR_REPO }}:latest ${{ secrets.ECR_REPO }}:latest
           - docker push ${{ secrets.ECR_REPO }}:latest

      - name: Build and push frontend image
        run: | 
           - apk add --no-cache python3
           - pip3 install awscli
           - docker build -t ${{ secrets.ECR_REPO }}:latest -f ./frontend/Dockerfile .
           - $(aws ecr get-login-password --region us-east-1 --no-include-email)
           - docker push ${{ secrets.ECR_REPO }}:latest
           - docker tag ${{ secrets.ECR_REPO }}:latest ${{ secrets.ECR_REPO }}:latest
           - docker push ${{ secrets.ECR_REPO }}:latest

      - name: Build and push admin image
        run: | 
           - apk add --no-cache python3
           - pip3 install awscli
           - docker build -t ${{ secrets.ECR_REPO }}:latest -f ./admin/Dockerfile .
           - $(aws ecr get-login-password --region us-east-1 --no-include-email)
           - docker push ${{ secrets.ECR_REPO }}:latest
           - docker tag ${{ secrets.ECR_REPO }}:latest ${{ secrets.ECR_REPO }}:latest
           - docker push ${{ secrets.ECR_REPO }}:latest