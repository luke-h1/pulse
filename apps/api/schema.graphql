"""The status of the user account"""
enum AccountStatus {
  ACTIVE
  BANNED
  ON_HOLD
}

"""Create new project"""
input CreateProjectInput {
  appStoreUrl: String
  content: JSON!
  githubUrl: String
  intro: String!
  playStoreUrl: String
  siteUrl: String
  tags: [String!]!
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""Follow user input"""
input FollowUserInput {
  action: UserFollowActions
  userId: ID
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  """Create new project"""
  createProject(input: CreateProjectInput!): Project!

  """Delete project"""
  deleteProject(projectId: String!): Project!

  """Delete a user"""
  deleteUser(userId: String!): User!

  """Follow a user or unfollow a user"""
  followerUser(input: FollowUserInput!): User!

  """Login a user"""
  login(token: String!): String!

  """Signup a user"""
  signup(token: String!): String!

  """Update a user's ban status"""
  updateAccountStatus(accountStatus: AccountStatus!, userId: String!): User!

  """Update project"""
  updateProject(input: CreateProjectInput!, projectId: String!): Project!

  """Update a user's information"""
  updateUser(input: UpdateUserInput!): User!

  """Update a user's role"""
  updateUserRole(role: Role!, userId: String!): User!
}

"""Post"""
type Post {
  author: User!
  content: JSON!
  createdAt: Date!
  id: ID!
  image: String
  intro: String!
  title: String!
  updatedAt: Date!
}

"""Project"""
type Project {
  appStoreUrl: String
  author: User!
  content: JSON!
  createdAt: Date!
  githubUrl: String
  id: ID!
  intro: String!
  playStoreUrl: String
  siteUrl: String
  tags: [String!]!
  title: String!
  updatedAt: Date!
}

"""ProjectsResponse"""
type ProjectsResponse {
  nextCursor: String
  prevCursor: String
  results: [Project!]!
  totalCount: Int!
}

type Query {
  """Get all users"""
  getAllUsers: UserResponse!

  """Get all users. Only available if the user has an ADMIN role"""
  getAllUsersAdmin(input: SearchUsersInput): UsersResponse!

  """Get the currently authenticated user"""
  getCurrentUser: User!

  """
  Get the currently authenticated user. Only available if the user has an ADMIN role
  """
  getCurrentUserAsAdmin: User!

  """Get currently logged in users's projects"""
  getMyProjects(input: SearchInput): ProjectsResponse!

  """Get project by ID"""
  getProject(id: String!): Project!

  """Get a user by id"""
  getUser(id: String!): User!
}

"""The role of the user"""
enum Role {
  ADMIN
  USER
}

"""Search projects input"""
input SearchInput {
  cursor: String
  order: SearchOrder
  orderBy: String
  search: String
}

"""Search order"""
enum SearchOrder {
  asc
  desc
}

"""Search user input"""
input SearchUsersInput {
  cursor: String
  order: SearchOrder
  orderBy: String
  search: String
}

"""Update user info"""
input UpdateUserInput {
  bio: String!
  email: String!
  firstName: String!
  github: String!
  image: String!
  lastName: String!
  location: String!
  twitter: String!
  username: String!
  website: String!
}

"""A user"""
type User {
  accountStatus: AccountStatus!
  bio: String
  createdAt: Date!

  """The email of the user"""
  email: String
  firstName: String!
  followers: [User!]
  followersCount: Int!
  following: [User!]
  followingCount: Int!
  github: String
  id: ID!
  image: String
  isBanned: Boolean!
  isFollowing: Boolean!
  isOnHold: Boolean!
  lastName: String!
  location: String
  posts: [Post!]
  projects: [Project!]
  role: Role!
  twitter: String
  updatedAt: Date!
  username: String
  website: String
}

"""User follow actions enum"""
enum UserFollowActions {
  FOLLOW
  UNFOLLOW
}

"""User response"""
type UserResponse {
  bannedUsersCount: Int!
  onHoldUsersCount: Int!
  results: [User!]!
  totalCount: Int!
}

"""Users response"""
type UsersResponse {
  nextCursor: String
  prevCursor: String
  results: [User!]!
  totalCount: Int!
}