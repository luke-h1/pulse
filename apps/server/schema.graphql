# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

enum AccountStatus {
  ACTIVE
  BANNED
  ON_HOLD
}

type CountResponse {
  count: Float
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input EnumAccountStatusFilter {
  equals: AccountStatus
  in: [AccountStatus!]
  not: NestedEnumAccountStatusFilter
  notIn: [AccountStatus!]
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumStatusFilter {
  equals: Status
  in: [Status!]
  not: NestedEnumStatusFilter
  notIn: [Status!]
}

type FieldError {
  code: String
  field: String!
  message: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type Mutation {
  createPost(options: PostCreateInput!): PostResponse!
  createProject(options: ProjectCreateInput!): ProjectResponse!
  deleteAccount: Boolean!
  deleteAllPosts: Boolean!
  deleteAllProjects: Boolean!

  """Deletes a post"""
  deletePost(slug: String!): Boolean!
  deletePostAsAdmin(slug: String!): Boolean!
  deleteProject(slug: String!): Boolean!
  deleteProjectAdmin(slug: String!): Boolean!
  deleteUser(id: String!): Boolean!
  login(options: UserLoginInput!): UserResponse!
  logout: Boolean!
  register(options: UserRegisterInput!): UserResponse!

  """Updates a post"""
  updatePost(options: PostUpdateInput!, slug: String!): PostResponse!
  updateProject(options: ProjectUpdateInput!, slug: String!): ProjectResponse!
  updateUserDetails(options: UserUpdateInput!): UserResponse!
  updateUserRole(id: String!, role: Role!): UserResponse!
  updateUserStatus(id: String!, status: AccountStatus!): UserResponse!

  """Returns all user slugs"""
  userSlugs: SlugsResponse
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input NestedEnumAccountStatusFilter {
  equals: AccountStatus
  in: [AccountStatus!]
  not: NestedEnumAccountStatusFilter
  notIn: [AccountStatus!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumStatusFilter {
  equals: Status
  in: [Status!]
  not: NestedEnumStatusFilter
  notIn: [Status!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

type Post {
  authorId: String!
  content: JSON!
  createdAt: DateTimeISO!
  id: String!
  image: String
  intro: String!
  readingTime: String!
  slug: String!
  status: Status!
  tags: [String!]!
  title: String!
  updatedAt: DateTimeISO!
}

input PostCreateInput {
  content: String!
  image: String
  intro: String!
  tags: [String!]!
  title: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostResponse {
  errors: [FieldError!]
  post: Post
}

input PostUpdateInput {
  content: String!
  image: String
  intro: String!
  status: Status!
  tags: [String!]!
  title: String!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  content: JsonFilter
  createdAt: DateTimeFilter
  id: StringFilter
  image: StringNullableFilter
  intro: StringFilter
  readingTime: StringFilter
  slug: StringFilter
  status: EnumStatusFilter
  tags: StringNullableListFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

type Project {
  appStoreUrl: String
  authorId: String!
  content: JSON!
  createdAt: DateTimeISO!
  githubUrl: String
  id: String!
  image: String
  intro: String!
  playStoreUrl: String
  readingTime: String!
  siteUrl: String
  slug: String!
  status: Status!
  tags: [String!]!
  title: String!
  updatedAt: DateTimeISO!
}

input ProjectCreateInput {
  appStoreUrl: String
  content: String!
  githubUrl: String
  image: String
  intro: String!
  playStoreUrl: String
  siteUrl: String
  tags: [String!]!
  title: String!
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

type ProjectResponse {
  errors: [FieldError!]
  project: Project
}

input ProjectUpdateInput {
  appStoreUrl: String
  content: String!
  githubUrl: String
  image: String
  intro: String!
  playStoreUrl: String
  siteUrl: String
  status: Status!
  tags: [String!]!
  title: String!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  appStoreUrl: StringNullableFilter
  author: UserRelationFilter
  authorId: StringFilter
  content: JsonFilter
  createdAt: DateTimeFilter
  githubUrl: StringNullableFilter
  id: StringFilter
  image: StringNullableFilter
  intro: StringFilter
  playStoreUrl: StringNullableFilter
  readingTime: StringFilter
  siteUrl: StringNullableFilter
  slug: StringFilter
  status: EnumStatusFilter
  tags: StringNullableListFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

type Query {
  """Returns the total number of posts"""
  countPosts: CountResponse
  countProjects: CountResponse!
  health: String!
  me: User
  post(slug: String!): Post

  """Returns all post slugs"""
  postSlugs: SlugsResponse

  """Returns all posts"""
  posts: [Post!]
  project(slug: String!): Project

  """Returns all project slugs"""
  projectSlugs: SlugsResponse

  """Returns all projects"""
  projects: [Project!]

  """Returns the 5 most recent posts"""
  recentPosts: [Post!]

  """Returns the 5 most recent projects"""
  recentProjects: [Project!]

  """
  Search posts (full text search on title / intro). Content will be added in the future
  """
  searchPosts(query: String!): [Post!]

  """Search projects (full text search on title / intro)"""
  searchProjects(query: String!): [Project!]
  user(id: String!): User
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  USER
}

type SlugsResponse {
  slugs: [String!]
}

enum Status {
  DRAFT
  PUBLISHED
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type User {
  _count: UserCount
  accountStatus: AccountStatus!
  bio: String
  createdAt: DateTimeISO!
  email: String
  emailVerified: DateTimeISO
  firstName: String!
  github: String
  id: String!
  image: String
  lastName: String!
  location: String
  provider: String!
  role: Role!
  twitter: String
  updatedAt: DateTimeISO!
  username: String!
  website: String
}

type UserCount {
  posts(where: PostWhereInput): Int!
  projects(where: ProjectWhereInput): Int!
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserRegisterInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  username: String!
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

type UserResponse {
  errors: [FieldError!]
  user: User
}

input UserUpdateInput {
  github: String
  image: String
  location: String
  twitter: String
  website: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accountStatus: EnumAccountStatusFilter
  bio: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  firstName: StringFilter
  github: StringNullableFilter
  id: StringFilter
  image: StringNullableFilter
  lastName: StringFilter
  location: StringNullableFilter
  password: StringFilter
  posts: PostListRelationFilter
  projects: ProjectListRelationFilter
  provider: StringFilter
  role: EnumRoleFilter
  twitter: StringNullableFilter
  updatedAt: DateTimeFilter
  username: StringFilter
  website: StringNullableFilter
}