datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator typegraphql {
  provider                  = "typegraphql-prisma"
  output                    = "./generated/type-graphql"
  omitOutputFieldsByDefault = ["password"]
}

generator enums {
  provider = "ts-node  ./src/prisma/enum-generator.ts"
}

// https://dbdiagram.io/d
generator dbml {
  provider = "prisma-dbml-generator"
}

enum Role {
  USER
  ADMIN
}

enum AccountStatus {
  BANNED
  ON_HOLD
  ACTIVE
}

enum Status {
  PUBLISHED
  DRAFT
  SCHEDULED
}

model User {
  id            String        @id @unique @default(cuid())
  provider      String        @default("email")
  firstName     String
  lastName      String
  email         String?       @unique
  username      String        @unique
  password      String
  image         String?
  role          Role          @default(USER)
  github        String?
  website       String?
  twitter       String?
  bio           String?
  location      String?
  accountStatus AccountStatus @default(ACTIVE)
  projects      Project[]
  posts         Post[]
  reports       AdminReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id           String   @id @unique @default(cuid())
  title        String   @db.VarChar(50)
  intro        String
  image        String?
  content      Json
  githubUrl    String?
  siteUrl      String?
  appStoreUrl  String?
  playStoreUrl String?
  tags         String[]
  status       Status   @default(DRAFT)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id    String  @id @unique @default(cuid())
  title String  @db.VarChar(50)
  intro String
  image String?

  tags    String[]
  content Json
  status  Status   @default(DRAFT)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminReport {
  id       String  @id @unique @default(cuid())
  title    String  @db.VarChar(255)
  content  Json
  author   User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
