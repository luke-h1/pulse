/* eslint-disable */
// @ts-ignore
// DO NOT EDIT
// This file is automatically generated. Run pnpm gen to update it

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: any;
  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any;
};

/** The status of the user account */
export enum AccountStatus {
  Active = 'ACTIVE',
  Banned = 'BANNED',
  OnHold = 'ON_HOLD',
}

/** Create new post */
export type CreatePostInput = {
  content: Scalars['JSON'];
  image?: InputMaybe<Scalars['String']>;
  intro: Scalars['String'];
  title: Scalars['String'];
};

/** Create new project */
export type CreateProjectInput = {
  appStoreUrl?: InputMaybe<Scalars['String']>;
  content: Scalars['JSON'];
  githubUrl?: InputMaybe<Scalars['String']>;
  intro: Scalars['String'];
  playStoreUrl?: InputMaybe<Scalars['String']>;
  siteUrl?: InputMaybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  title: Scalars['String'];
};

/** Follow user input */
export type FollowUserInput = {
  action?: InputMaybe<UserFollowActions>;
  userId?: InputMaybe<Scalars['ID']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create new post */
  createPost: Post;
  /** Create new project */
  createProject: Project;
  /** Delete post */
  deletePost: Post;
  /** Delete project */
  deleteProject: Project;
  /** Delete a user */
  deleteUser: User;
  /** Follow a user or unfollow a user */
  followerUser: User;
  /** Login a user */
  login: Scalars['String'];
  /** Signup a user */
  signup: Scalars['String'];
  /** Update a user's ban status */
  updateAccountStatus: User;
  /** Update post */
  updatePost: Post;
  /** Update project */
  updateProject: Project;
  /** Update a user's information */
  updateUser: User;
  /** Update a user's role */
  updateUserRole: User;
};

export type MutationCreatePostArgs = {
  input: CreatePostInput;
};

export type MutationCreateProjectArgs = {
  input: CreateProjectInput;
};

export type MutationDeletePostArgs = {
  id: Scalars['String'];
};

export type MutationDeleteProjectArgs = {
  projectId: Scalars['String'];
};

export type MutationDeleteUserArgs = {
  userId: Scalars['String'];
};

export type MutationFollowerUserArgs = {
  input: FollowUserInput;
};

export type MutationLoginArgs = {
  token: Scalars['String'];
};

export type MutationSignupArgs = {
  token: Scalars['String'];
};

export type MutationUpdateAccountStatusArgs = {
  accountStatus: AccountStatus;
  userId: Scalars['String'];
};

export type MutationUpdatePostArgs = {
  id: Scalars['String'];
  input: CreatePostInput;
};

export type MutationUpdateProjectArgs = {
  input: CreateProjectInput;
  projectId: Scalars['String'];
};

export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};

export type MutationUpdateUserRoleArgs = {
  role: Role;
  userId: Scalars['String'];
};

/** Post */
export type Post = {
  __typename?: 'Post';
  author: User;
  content: Scalars['JSON'];
  createdAt: Scalars['Date'];
  id: Scalars['ID'];
  image?: Maybe<Scalars['String']>;
  intro: Scalars['String'];
  slug: Scalars['String'];
  title: Scalars['String'];
  updatedAt: Scalars['Date'];
};

/** Search posts input */
export type PostSearchInput = {
  cursor?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<SearchOrder>;
  orderBy?: InputMaybe<Scalars['String']>;
  search?: InputMaybe<Scalars['String']>;
};

/** PostsResponse */
export type PostsResponse = {
  __typename?: 'PostsResponse';
  nextCursor?: Maybe<Scalars['String']>;
  prevCursor?: Maybe<Scalars['String']>;
  results: Array<Post>;
  totalCount: Scalars['Int'];
};

/** Project */
export type Project = {
  __typename?: 'Project';
  appStoreUrl?: Maybe<Scalars['String']>;
  author: User;
  content: Scalars['JSON'];
  createdAt: Scalars['Date'];
  githubUrl?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  intro: Scalars['String'];
  playStoreUrl?: Maybe<Scalars['String']>;
  siteUrl?: Maybe<Scalars['String']>;
  slug: Scalars['String'];
  tags: Array<Scalars['String']>;
  title: Scalars['String'];
  updatedAt: Scalars['Date'];
};

/** ProjectsResponse */
export type ProjectsResponse = {
  __typename?: 'ProjectsResponse';
  nextCursor?: Maybe<Scalars['String']>;
  prevCursor?: Maybe<Scalars['String']>;
  results: Array<Project>;
  totalCount: Scalars['Int'];
};

export type Query = {
  __typename?: 'Query';
  /** Get the currently authenticated user */
  currentUser: User;
  /** Get the currently authenticated user. Only available if the user has an ADMIN role */
  currentUserAsAdmin: User;
  myPosts: PostsResponse;
  /** Get currently logged in users's projects */
  myProjects: ProjectsResponse;
  /** Get post by slug */
  post: Post;
  posts: PostsResponse;
  /** Get project by slug */
  project: Project;
  /** Get a user by id */
  user: User;
  /** Get all users */
  users: UserResponse;
  /** Get all users. Only available if the user has an ADMIN role */
  usersAdmin: UsersResponse;
};

export type QueryMyPostsArgs = {
  input?: InputMaybe<PostSearchInput>;
};

export type QueryMyProjectsArgs = {
  input?: InputMaybe<SearchInput>;
};

export type QueryPostArgs = {
  slug: Scalars['String'];
};

export type QueryPostsArgs = {
  input?: InputMaybe<PostSearchInput>;
};

export type QueryProjectArgs = {
  slug: Scalars['String'];
};

export type QueryUserArgs = {
  id: Scalars['String'];
};

export type QueryUsersAdminArgs = {
  input?: InputMaybe<SearchUsersInput>;
};

/** The role of the user */
export enum Role {
  Admin = 'ADMIN',
  User = 'USER',
}

/** Search projects input */
export type SearchInput = {
  cursor?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<SearchOrder>;
  orderBy?: InputMaybe<Scalars['String']>;
  search?: InputMaybe<Scalars['String']>;
};

/** Search order */
export enum SearchOrder {
  Asc = 'asc',
  Desc = 'desc',
}

/** Search user input */
export type SearchUsersInput = {
  cursor?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<SearchOrder>;
  orderBy?: InputMaybe<Scalars['String']>;
  search?: InputMaybe<Scalars['String']>;
};

/** Update user info */
export type UpdateUserInput = {
  bio: Scalars['String'];
  email: Scalars['String'];
  firstName: Scalars['String'];
  github: Scalars['String'];
  image: Scalars['String'];
  lastName: Scalars['String'];
  location: Scalars['String'];
  twitter: Scalars['String'];
  username: Scalars['String'];
  website: Scalars['String'];
};

/** A user */
export type User = {
  __typename?: 'User';
  accountStatus: AccountStatus;
  bio?: Maybe<Scalars['String']>;
  createdAt: Scalars['Date'];
  /** The email of the user */
  email?: Maybe<Scalars['String']>;
  firstName: Scalars['String'];
  followers?: Maybe<Array<User>>;
  followersCount: Scalars['Int'];
  following?: Maybe<Array<User>>;
  followingCount: Scalars['Int'];
  github?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  image?: Maybe<Scalars['String']>;
  isBanned: Scalars['Boolean'];
  isFollowing: Scalars['Boolean'];
  isOnHold: Scalars['Boolean'];
  lastName: Scalars['String'];
  location?: Maybe<Scalars['String']>;
  posts?: Maybe<Array<Post>>;
  projects?: Maybe<Array<Project>>;
  role: Role;
  twitter?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Date'];
  username?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

/** User follow actions enum */
export enum UserFollowActions {
  Follow = 'FOLLOW',
  Unfollow = 'UNFOLLOW',
}

/** User response */
export type UserResponse = {
  __typename?: 'UserResponse';
  bannedUsersCount: Scalars['Int'];
  onHoldUsersCount: Scalars['Int'];
  results: Array<User>;
  totalCount: Scalars['Int'];
};

/** Users response */
export type UsersResponse = {
  __typename?: 'UsersResponse';
  nextCursor?: Maybe<Scalars['String']>;
  prevCursor?: Maybe<Scalars['String']>;
  results: Array<User>;
  totalCount: Scalars['Int'];
};

export type CreatePostMutationVariables = Exact<{
  input: CreatePostInput;
}>;

export type CreatePostMutation = {
  __typename?: 'Mutation';
  createPost: { __typename?: 'Post'; id: string; slug: string };
};

export type PostQueryVariables = Exact<{
  slug: Scalars['String'];
}>;

export type PostQuery = {
  __typename?: 'Query';
  post: {
    __typename?: 'Post';
    id: string;
    createdAt: any;
    content: any;
    image?: string | null;
    intro: string;
    slug: string;
    title: string;
    updatedAt: any;
  };
};

export type PostsQueryVariables = Exact<{ [key: string]: never }>;

export type PostsQuery = {
  __typename?: 'Query';
  posts: {
    __typename?: 'PostsResponse';
    nextCursor?: string | null;
    prevCursor?: string | null;
    results: Array<{
      __typename?: 'Post';
      image?: string | null;
      intro: string;
      slug: string;
      title: string;
      createdAt: any;
      id: string;
      content: any;
      updatedAt: any;
      author: { __typename?: 'User'; firstName: string };
    }>;
  };
};

export const CreatePostDocument = gql`
  mutation CreatePost($input: CreatePostInput!) {
    createPost(input: $input) {
      id
      slug
    }
  }
`;
export type CreatePostMutationFn = Apollo.MutationFunction<
  CreatePostMutation,
  CreatePostMutationVariables
>;

/**
 * __useCreatePostMutation__
 *
 * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePostMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreatePostMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreatePostMutation,
    CreatePostMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(
    CreatePostDocument,
    options,
  );
}
export type CreatePostMutationHookResult = ReturnType<
  typeof useCreatePostMutation
>;
export type CreatePostMutationResult =
  Apollo.MutationResult<CreatePostMutation>;
export type CreatePostMutationOptions = Apollo.BaseMutationOptions<
  CreatePostMutation,
  CreatePostMutationVariables
>;
export const PostDocument = gql`
  query Post($slug: String!) {
    post(slug: $slug) {
      id
      createdAt
      content
      image
      intro
      slug
      title
      updatedAt
    }
  }
`;

/**
 * __usePostQuery__
 *
 * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.
 * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *   },
 * });
 */
export function usePostQuery(
  baseOptions: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, options);
}
export function usePostLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(
    PostDocument,
    options,
  );
}
export type PostQueryHookResult = ReturnType<typeof usePostQuery>;
export type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;
export type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;
export const PostsDocument = gql`
  query Posts {
    posts {
      nextCursor
      prevCursor
      results {
        author {
          firstName
        }
        image
        intro
        slug
        title
        createdAt
        id
        content
        updatedAt
      }
    }
  }
`;

/**
 * __usePostsQuery__
 *
 * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.
 * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostsQuery({
 *   variables: {
 *   },
 * });
 */
export function usePostsQuery(
  baseOptions?: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<PostsQuery, PostsQueryVariables>(
    PostsDocument,
    options,
  );
}
export function usePostsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(
    PostsDocument,
    options,
  );
}
export type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;
export type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;
export type PostsQueryResult = Apollo.QueryResult<
  PostsQuery,
  PostsQueryVariables
>;
