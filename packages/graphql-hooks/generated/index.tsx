import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never };
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never;
    };

/* eslint-disable */
// @ts-ignore
// DO NOT EDIT
// This file is automatically generated, run pnpm gen to update

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
  DateTimeISO: { input: any; output: any };
  JSON: { input: any; output: any };
};

export enum AccountStatus {
  Active = 'ACTIVE',
  Banned = 'BANNED',
  OnHold = 'ON_HOLD',
}

export type AdminReportListRelationFilter = {
  every?: InputMaybe<AdminReportWhereInput>;
  none?: InputMaybe<AdminReportWhereInput>;
  some?: InputMaybe<AdminReportWhereInput>;
};

export type AdminReportWhereInput = {
  AND?: InputMaybe<Array<AdminReportWhereInput>>;
  NOT?: InputMaybe<Array<AdminReportWhereInput>>;
  OR?: InputMaybe<Array<AdminReportWhereInput>>;
  author?: InputMaybe<UserNullableRelationFilter>;
  authorId?: InputMaybe<StringNullableFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type CountResponse = {
  __typename?: 'CountResponse';
  count?: Maybe<Scalars['Float']['output']>;
};

export type DateTimeFilter = {
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<NestedDateTimeFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type EnumAccountStatusFilter = {
  equals?: InputMaybe<AccountStatus>;
  in?: InputMaybe<Array<AccountStatus>>;
  not?: InputMaybe<NestedEnumAccountStatusFilter>;
  notIn?: InputMaybe<Array<AccountStatus>>;
};

export type EnumRoleFilter = {
  equals?: InputMaybe<Role>;
  in?: InputMaybe<Array<Role>>;
  not?: InputMaybe<NestedEnumRoleFilter>;
  notIn?: InputMaybe<Array<Role>>;
};

export type EnumStatusFilter = {
  equals?: InputMaybe<Status>;
  in?: InputMaybe<Array<Status>>;
  not?: InputMaybe<NestedEnumStatusFilter>;
  notIn?: InputMaybe<Array<Status>>;
};

export type FieldError = {
  __typename?: 'FieldError';
  code?: Maybe<Scalars['String']['output']>;
  field: Scalars['String']['output'];
  message: Scalars['String']['output'];
};

export type IdsResponse = {
  __typename?: 'IdsResponse';
  ids?: Maybe<Array<Scalars['String']['output']>>;
};

export type ImageSignature = {
  __typename?: 'ImageSignature';
  signature: Scalars['String']['output'];
  timestamp: Scalars['Int']['output'];
};

export type JsonFilter = {
  array_contains?: InputMaybe<Scalars['JSON']['input']>;
  array_ends_with?: InputMaybe<Scalars['JSON']['input']>;
  array_starts_with?: InputMaybe<Scalars['JSON']['input']>;
  equals?: InputMaybe<Scalars['JSON']['input']>;
  gt?: InputMaybe<Scalars['JSON']['input']>;
  gte?: InputMaybe<Scalars['JSON']['input']>;
  lt?: InputMaybe<Scalars['JSON']['input']>;
  lte?: InputMaybe<Scalars['JSON']['input']>;
  not?: InputMaybe<Scalars['JSON']['input']>;
  path?: InputMaybe<Array<Scalars['String']['input']>>;
  string_contains?: InputMaybe<Scalars['String']['input']>;
  string_ends_with?: InputMaybe<Scalars['String']['input']>;
  string_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  adminLogin: UserResponse;
  createImageSignature: ImageSignature;
  createPost: PostResponse;
  createProject: ProjectResponse;
  deleteAccount: Scalars['Boolean']['output'];
  deleteAllPosts: Scalars['Boolean']['output'];
  deleteAllProjects: Scalars['Boolean']['output'];
  /** Deletes a post */
  deletePost: Scalars['Boolean']['output'];
  deletePostAsAdmin: Scalars['Boolean']['output'];
  deleteProject: Scalars['Boolean']['output'];
  deleteProjectAdmin: Scalars['Boolean']['output'];
  deleteUser: Scalars['Boolean']['output'];
  login: UserResponse;
  logout: Scalars['Boolean']['output'];
  publishAllPosts: Scalars['Boolean']['output'];
  publishAllProjects: Scalars['Boolean']['output'];
  register: UserResponse;
  /** Updates a post */
  updatePost: PostResponse;
  updateProject: ProjectResponse;
  updateUserDetails: UserResponse;
  updateUserRole: UserResponse;
  updateUserStatus: UserResponse;
  /** Returns all user ids */
  userSlugs?: Maybe<IdsResponse>;
};

export type MutationAdminLoginArgs = {
  options: UserLoginInput;
};

export type MutationCreatePostArgs = {
  options: PostCreateInput;
};

export type MutationCreateProjectArgs = {
  options: ProjectCreateInput;
};

export type MutationDeletePostArgs = {
  id: Scalars['String']['input'];
};

export type MutationDeletePostAsAdminArgs = {
  id: Scalars['String']['input'];
};

export type MutationDeleteProjectArgs = {
  id: Scalars['String']['input'];
};

export type MutationDeleteProjectAdminArgs = {
  id: Scalars['String']['input'];
};

export type MutationDeleteUserArgs = {
  id: Scalars['String']['input'];
};

export type MutationLoginArgs = {
  options: UserLoginInput;
};

export type MutationRegisterArgs = {
  options: UserRegisterInput;
};

export type MutationUpdatePostArgs = {
  id: Scalars['String']['input'];
  options: PostUpdateInput;
};

export type MutationUpdateProjectArgs = {
  id: Scalars['String']['input'];
  options: ProjectUpdateInput;
};

export type MutationUpdateUserDetailsArgs = {
  options: UserUpdateInput;
};

export type MutationUpdateUserRoleArgs = {
  id: Scalars['String']['input'];
  role: Role;
};

export type MutationUpdateUserStatusArgs = {
  id: Scalars['String']['input'];
  status: AccountStatus;
};

export type NestedDateTimeFilter = {
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<NestedDateTimeFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type NestedEnumAccountStatusFilter = {
  equals?: InputMaybe<AccountStatus>;
  in?: InputMaybe<Array<AccountStatus>>;
  not?: InputMaybe<NestedEnumAccountStatusFilter>;
  notIn?: InputMaybe<Array<AccountStatus>>;
};

export type NestedEnumRoleFilter = {
  equals?: InputMaybe<Role>;
  in?: InputMaybe<Array<Role>>;
  not?: InputMaybe<NestedEnumRoleFilter>;
  notIn?: InputMaybe<Array<Role>>;
};

export type NestedEnumStatusFilter = {
  equals?: InputMaybe<Status>;
  in?: InputMaybe<Array<Status>>;
  not?: InputMaybe<NestedEnumStatusFilter>;
  notIn?: InputMaybe<Array<Status>>;
};

export type NestedStringFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type NestedStringNullableFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedStringNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type Post = {
  __typename?: 'Post';
  authorFullName: Scalars['String']['output'];
  authorId: Scalars['String']['output'];
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  creator: User;
  id: Scalars['String']['output'];
  image?: Maybe<Scalars['String']['output']>;
  intro: Scalars['String']['output'];
  isAuthor: Scalars['Boolean']['output'];
  status: Status;
  tags: Array<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type PostCreateInput = {
  content: Scalars['JSON']['input'];
  image: Scalars['String']['input'];
  intro: Scalars['String']['input'];
  status: Status;
  tags: Array<Scalars['String']['input']>;
  title: Scalars['String']['input'];
};

export type PostListRelationFilter = {
  every?: InputMaybe<PostWhereInput>;
  none?: InputMaybe<PostWhereInput>;
  some?: InputMaybe<PostWhereInput>;
};

export type PostResponse = {
  __typename?: 'PostResponse';
  errors?: Maybe<Array<FieldError>>;
  post?: Maybe<Post>;
};

export type PostUpdateInput = {
  content: Scalars['JSON']['input'];
  image: Scalars['String']['input'];
  intro: Scalars['String']['input'];
  status: Status;
  tags: Array<Scalars['String']['input']>;
  title: Scalars['String']['input'];
};

export type PostWhereInput = {
  AND?: InputMaybe<Array<PostWhereInput>>;
  NOT?: InputMaybe<Array<PostWhereInput>>;
  OR?: InputMaybe<Array<PostWhereInput>>;
  author?: InputMaybe<UserRelationFilter>;
  authorId?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringNullableFilter>;
  intro?: InputMaybe<StringFilter>;
  status?: InputMaybe<EnumStatusFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type Project = {
  __typename?: 'Project';
  appStoreUrl?: Maybe<Scalars['String']['output']>;
  authorFullName: Scalars['String']['output'];
  authorId: Scalars['String']['output'];
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  creator: User;
  githubUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  image?: Maybe<Scalars['String']['output']>;
  intro: Scalars['String']['output'];
  isAuthor: Scalars['Boolean']['output'];
  playStoreUrl?: Maybe<Scalars['String']['output']>;
  siteUrl?: Maybe<Scalars['String']['output']>;
  status: Status;
  tags: Array<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type ProjectCreateInput = {
  appStoreUrl?: InputMaybe<Scalars['String']['input']>;
  content: Scalars['JSON']['input'];
  githubUrl?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  intro: Scalars['String']['input'];
  playStoreUrl?: InputMaybe<Scalars['String']['input']>;
  siteUrl?: InputMaybe<Scalars['String']['input']>;
  status: Status;
  tags: Array<Scalars['String']['input']>;
  title: Scalars['String']['input'];
};

export type ProjectListRelationFilter = {
  every?: InputMaybe<ProjectWhereInput>;
  none?: InputMaybe<ProjectWhereInput>;
  some?: InputMaybe<ProjectWhereInput>;
};

export type ProjectResponse = {
  __typename?: 'ProjectResponse';
  errors?: Maybe<Array<FieldError>>;
  project?: Maybe<Project>;
};

export type ProjectUpdateInput = {
  appStoreUrl?: InputMaybe<Scalars['String']['input']>;
  content: Scalars['JSON']['input'];
  githubUrl?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  intro: Scalars['String']['input'];
  playStoreUrl?: InputMaybe<Scalars['String']['input']>;
  siteUrl?: InputMaybe<Scalars['String']['input']>;
  status: Status;
  tags: Array<Scalars['String']['input']>;
  title: Scalars['String']['input'];
};

export type ProjectWhereInput = {
  AND?: InputMaybe<Array<ProjectWhereInput>>;
  NOT?: InputMaybe<Array<ProjectWhereInput>>;
  OR?: InputMaybe<Array<ProjectWhereInput>>;
  appStoreUrl?: InputMaybe<StringNullableFilter>;
  author?: InputMaybe<UserRelationFilter>;
  authorId?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  githubUrl?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringNullableFilter>;
  intro?: InputMaybe<StringFilter>;
  playStoreUrl?: InputMaybe<StringNullableFilter>;
  siteUrl?: InputMaybe<StringNullableFilter>;
  status?: InputMaybe<EnumStatusFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type Query = {
  __typename?: 'Query';
  adminPosts?: Maybe<Array<Post>>;
  /** Returns the total number of posts */
  countPosts?: Maybe<CountResponse>;
  countProjects: CountResponse;
  health: Scalars['String']['output'];
  me?: Maybe<User>;
  myPosts?: Maybe<Array<Post>>;
  myProjects?: Maybe<Array<Project>>;
  post?: Maybe<Post>;
  /** Returns all post slugs */
  postIds?: Maybe<IdsResponse>;
  postStatus?: Maybe<Post>;
  /** Returns all posts */
  posts?: Maybe<Array<Post>>;
  project?: Maybe<Project>;
  /** Returns all project slugs */
  projectIds?: Maybe<IdsResponse>;
  /** Returns all projects */
  projects?: Maybe<Array<Project>>;
  /** Returns the 5 most recent posts */
  recentPosts?: Maybe<Array<Post>>;
  /** Returns the 5 most recent projects */
  recentProjects?: Maybe<Array<Project>>;
  /** Search posts (full text search on title) */
  searchPosts?: Maybe<Array<Post>>;
  /** Search projects (full text search on title / intro) */
  searchProjects?: Maybe<Array<Project>>;
  user?: Maybe<User>;
  users: Array<User>;
};

export type QueryPostArgs = {
  id: Scalars['String']['input'];
};

export type QueryPostStatusArgs = {
  id: Scalars['String']['input'];
};

export type QueryPostsArgs = {
  status: Status;
};

export type QueryProjectArgs = {
  id: Scalars['String']['input'];
};

export type QuerySearchPostsArgs = {
  query: Scalars['String']['input'];
};

export type QuerySearchProjectsArgs = {
  query: Scalars['String']['input'];
};

export type QueryUserArgs = {
  id: Scalars['String']['input'];
};

export enum QueryMode {
  Default = 'default',
  Insensitive = 'insensitive',
}

export enum Role {
  Admin = 'ADMIN',
  User = 'USER',
}

export enum Status {
  Draft = 'DRAFT',
  Published = 'PUBLISHED',
  Scheduled = 'SCHEDULED',
}

export type StringFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type StringNullableFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedStringNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type StringNullableListFilter = {
  equals?: InputMaybe<Array<Scalars['String']['input']>>;
  has?: InputMaybe<Scalars['String']['input']>;
  hasEvery?: InputMaybe<Array<Scalars['String']['input']>>;
  hasSome?: InputMaybe<Array<Scalars['String']['input']>>;
  isEmpty?: InputMaybe<Scalars['Boolean']['input']>;
};

export type User = {
  __typename?: 'User';
  _count?: Maybe<UserCount>;
  accountStatus: AccountStatus;
  bio?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTimeISO']['output'];
  email?: Maybe<Scalars['String']['output']>;
  firstName: Scalars['String']['output'];
  fullName: Scalars['String']['output'];
  github?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  image?: Maybe<Scalars['String']['output']>;
  lastName: Scalars['String']['output'];
  location?: Maybe<Scalars['String']['output']>;
  provider: Scalars['String']['output'];
  role: Role;
  twitter?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTimeISO']['output'];
  username: Scalars['String']['output'];
  website?: Maybe<Scalars['String']['output']>;
};

export type UserCount = {
  __typename?: 'UserCount';
  posts: Scalars['Int']['output'];
  projects: Scalars['Int']['output'];
  reports: Scalars['Int']['output'];
};

export type UserCountPostsArgs = {
  where?: InputMaybe<PostWhereInput>;
};

export type UserCountProjectsArgs = {
  where?: InputMaybe<ProjectWhereInput>;
};

export type UserCountReportsArgs = {
  where?: InputMaybe<AdminReportWhereInput>;
};

export type UserLoginInput = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
};

export type UserNullableRelationFilter = {
  is?: InputMaybe<UserWhereInput>;
  isNot?: InputMaybe<UserWhereInput>;
};

export type UserRegisterInput = {
  email: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  password: Scalars['String']['input'];
  username: Scalars['String']['input'];
};

export type UserRelationFilter = {
  is?: InputMaybe<UserWhereInput>;
  isNot?: InputMaybe<UserWhereInput>;
};

export type UserResponse = {
  __typename?: 'UserResponse';
  errors?: Maybe<Array<FieldError>>;
  user?: Maybe<User>;
};

export type UserUpdateInput = {
  github?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  twitter?: InputMaybe<Scalars['String']['input']>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type UserWhereInput = {
  AND?: InputMaybe<Array<UserWhereInput>>;
  NOT?: InputMaybe<Array<UserWhereInput>>;
  OR?: InputMaybe<Array<UserWhereInput>>;
  accountStatus?: InputMaybe<EnumAccountStatusFilter>;
  bio?: InputMaybe<StringNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  email?: InputMaybe<StringNullableFilter>;
  firstName?: InputMaybe<StringFilter>;
  github?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringNullableFilter>;
  lastName?: InputMaybe<StringFilter>;
  location?: InputMaybe<StringNullableFilter>;
  password?: InputMaybe<StringFilter>;
  posts?: InputMaybe<PostListRelationFilter>;
  projects?: InputMaybe<ProjectListRelationFilter>;
  provider?: InputMaybe<StringFilter>;
  reports?: InputMaybe<AdminReportListRelationFilter>;
  role?: InputMaybe<EnumRoleFilter>;
  twitter?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  username?: InputMaybe<StringFilter>;
  website?: InputMaybe<StringNullableFilter>;
};

export type AdminLoginMutationVariables = Exact<{
  options: UserLoginInput;
}>;

export type AdminLoginMutation = {
  __typename?: 'Mutation';
  adminLogin: {
    __typename?: 'UserResponse';
    errors?: Array<{
      __typename?: 'FieldError';
      message: string;
      field: string;
      code?: string | null;
    }> | null;
    user?: {
      __typename?: 'User';
      role: Role;
      id: string;
      firstName: string;
      lastName: string;
      image?: string | null;
      github?: string | null;
      email?: string | null;
      bio?: string | null;
      twitter?: string | null;
      username: string;
      website?: string | null;
      createdAt: any;
      location?: string | null;
    } | null;
  };
};

export type DeleteUserMutationVariables = Exact<{
  deleteUserId: Scalars['String']['input'];
}>;

export type DeleteUserMutation = {
  __typename?: 'Mutation';
  deleteUser: boolean;
};

export type UpdateUserStatusMutationVariables = Exact<{
  status: AccountStatus;
  updateUserStatusId: Scalars['String']['input'];
}>;

export type UpdateUserStatusMutation = {
  __typename?: 'Mutation';
  updateUserStatus: {
    __typename?: 'UserResponse';
    errors?: Array<{
      __typename?: 'FieldError';
      code?: string | null;
      field: string;
      message: string;
    }> | null;
    user?: {
      __typename?: 'User';
      id: string;
      firstName: string;
      lastName: string;
      image?: string | null;
      github?: string | null;
      email?: string | null;
      bio?: string | null;
      twitter?: string | null;
      username: string;
      website?: string | null;
      createdAt: any;
      location?: string | null;
    } | null;
  };
};

export type AdminPostsQueryVariables = Exact<{ [key: string]: never }>;

export type AdminPostsQuery = {
  __typename?: 'Query';
  adminPosts?: Array<{
    __typename?: 'Post';
    id: string;
    title: string;
    intro: string;
    content: any;
    tags: Array<string>;
    image?: string | null;
    status: Status;
    isAuthor: boolean;
    authorFullName: string;
    createdAt: any;
    updatedAt: any;
    creator: { __typename?: 'User'; id: string };
  }> | null;
};

export type UsersQueryVariables = Exact<{ [key: string]: never }>;

export type UsersQuery = {
  __typename?: 'Query';
  users: Array<{
    __typename?: 'User';
    role: Role;
    accountStatus: AccountStatus;
    id: string;
    firstName: string;
    lastName: string;
    image?: string | null;
    github?: string | null;
    email?: string | null;
    bio?: string | null;
    twitter?: string | null;
    username: string;
    website?: string | null;
    createdAt: any;
    location?: string | null;
  }>;
};

export type PostFragmentFragment = {
  __typename?: 'Post';
  id: string;
  title: string;
  intro: string;
  content: any;
  tags: Array<string>;
  image?: string | null;
  status: Status;
  isAuthor: boolean;
  authorFullName: string;
  createdAt: any;
  updatedAt: any;
  creator: { __typename?: 'User'; id: string };
};

export type ProjectFragmentFragment = {
  __typename?: 'Project';
  id: string;
  title: string;
  intro: string;
  image?: string | null;
  tags: Array<string>;
  status: Status;
  siteUrl?: string | null;
  playStoreUrl?: string | null;
  githubUrl?: string | null;
  appStoreUrl?: string | null;
  content: any;
  isAuthor: boolean;
  authorFullName: string;
  createdAt: any;
  updatedAt: any;
  creator: { __typename?: 'User'; id: string };
};

export type UserFragmentFragment = {
  __typename?: 'User';
  id: string;
  firstName: string;
  lastName: string;
  image?: string | null;
  github?: string | null;
  email?: string | null;
  bio?: string | null;
  twitter?: string | null;
  username: string;
  website?: string | null;
  createdAt: any;
  location?: string | null;
};

export type CreatePostMutationVariables = Exact<{
  options: PostCreateInput;
}>;

export type CreatePostMutation = {
  __typename?: 'Mutation';
  createPost: {
    __typename?: 'PostResponse';
    errors?: Array<{
      __typename?: 'FieldError';
      code?: string | null;
      field: string;
      message: string;
    }> | null;
    post?: {
      __typename?: 'Post';
      id: string;
      title: string;
      intro: string;
      content: any;
      tags: Array<string>;
      image?: string | null;
      status: Status;
      isAuthor: boolean;
      authorFullName: string;
      createdAt: any;
      updatedAt: any;
      creator: { __typename?: 'User'; id: string };
    } | null;
  };
};

export type CreateProjectMutationVariables = Exact<{
  options: ProjectCreateInput;
}>;

export type CreateProjectMutation = {
  __typename?: 'Mutation';
  createProject: {
    __typename?: 'ProjectResponse';
    errors?: Array<{
      __typename?: 'FieldError';
      message: string;
      field: string;
      code?: string | null;
    }> | null;
    project?: {
      __typename?: 'Project';
      id: string;
      title: string;
      intro: string;
      image?: string | null;
      tags: Array<string>;
      status: Status;
      siteUrl?: string | null;
      playStoreUrl?: string | null;
      githubUrl?: string | null;
      appStoreUrl?: string | null;
      content: any;
      isAuthor: boolean;
      authorFullName: string;
      createdAt: any;
      updatedAt: any;
      creator: { __typename?: 'User'; id: string };
    } | null;
  };
};

export type CreateSignatureMutationVariables = Exact<{ [key: string]: never }>;

export type CreateSignatureMutation = {
  __typename?: 'Mutation';
  createImageSignature: {
    __typename?: 'ImageSignature';
    signature: string;
    timestamp: number;
  };
};

export type DeleteAccountMutationVariables = Exact<{ [key: string]: never }>;

export type DeleteAccountMutation = {
  __typename?: 'Mutation';
  deleteAccount: boolean;
};

export type DeletePostMutationVariables = Exact<{
  id: Scalars['String']['input'];
}>;

export type DeletePostMutation = {
  __typename?: 'Mutation';
  deletePost: boolean;
};

export type DeleteProjectMutationVariables = Exact<{
  id: Scalars['String']['input'];
}>;

export type DeleteProjectMutation = {
  __typename?: 'Mutation';
  deleteProject: boolean;
};

export type LoginMutationVariables = Exact<{
  options: UserLoginInput;
}>;

export type LoginMutation = {
  __typename?: 'Mutation';
  login: {
    __typename?: 'UserResponse';
    errors?: Array<{
      __typename?: 'FieldError';
      message: string;
      field: string;
      code?: string | null;
    }> | null;
    user?: {
      __typename?: 'User';
      role: Role;
      id: string;
      firstName: string;
      lastName: string;
      image?: string | null;
      github?: string | null;
      email?: string | null;
      bio?: string | null;
      twitter?: string | null;
      username: string;
      website?: string | null;
      createdAt: any;
      location?: string | null;
    } | null;
  };
};

export type LogoutMutationVariables = Exact<{ [key: string]: never }>;

export type LogoutMutation = { __typename?: 'Mutation'; logout: boolean };

export type RegisterMutationVariables = Exact<{
  options: UserRegisterInput;
}>;

export type RegisterMutation = {
  __typename?: 'Mutation';
  register: {
    __typename?: 'UserResponse';
    errors?: Array<{
      __typename?: 'FieldError';
      message: string;
      field: string;
      code?: string | null;
    }> | null;
    user?: {
      __typename?: 'User';
      role: Role;
      id: string;
      firstName: string;
      lastName: string;
      image?: string | null;
      github?: string | null;
      email?: string | null;
      bio?: string | null;
      twitter?: string | null;
      username: string;
      website?: string | null;
      createdAt: any;
      location?: string | null;
    } | null;
  };
};

export type UpdatePostMutationVariables = Exact<{
  options: PostUpdateInput;
  id: Scalars['String']['input'];
}>;

export type UpdatePostMutation = {
  __typename?: 'Mutation';
  updatePost: {
    __typename?: 'PostResponse';
    post?: {
      __typename?: 'Post';
      id: string;
      title: string;
      intro: string;
      content: any;
      tags: Array<string>;
      image?: string | null;
      status: Status;
      isAuthor: boolean;
      authorFullName: string;
      createdAt: any;
      updatedAt: any;
      creator: { __typename?: 'User'; id: string };
    } | null;
    errors?: Array<{
      __typename?: 'FieldError';
      code?: string | null;
      field: string;
      message: string;
    }> | null;
  };
};

export type UpdateProjectMutationVariables = Exact<{
  options: ProjectUpdateInput;
  id: Scalars['String']['input'];
}>;

export type UpdateProjectMutation = {
  __typename?: 'Mutation';
  updateProject: {
    __typename?: 'ProjectResponse';
    errors?: Array<{
      __typename?: 'FieldError';
      field: string;
      message: string;
      code?: string | null;
    }> | null;
    project?: {
      __typename?: 'Project';
      id: string;
      title: string;
      intro: string;
      image?: string | null;
      tags: Array<string>;
      status: Status;
      siteUrl?: string | null;
      playStoreUrl?: string | null;
      githubUrl?: string | null;
      appStoreUrl?: string | null;
      content: any;
      isAuthor: boolean;
      authorFullName: string;
      createdAt: any;
      updatedAt: any;
      creator: { __typename?: 'User'; id: string };
    } | null;
  };
};

export type MeQueryVariables = Exact<{ [key: string]: never }>;

export type MeQuery = {
  __typename?: 'Query';
  me?: {
    __typename?: 'User';
    role: Role;
    id: string;
    firstName: string;
    lastName: string;
    image?: string | null;
    github?: string | null;
    email?: string | null;
    bio?: string | null;
    twitter?: string | null;
    username: string;
    website?: string | null;
    createdAt: any;
    location?: string | null;
  } | null;
};

export type MyPostsQueryVariables = Exact<{ [key: string]: never }>;

export type MyPostsQuery = {
  __typename?: 'Query';
  myPosts?: Array<{
    __typename?: 'Post';
    id: string;
    title: string;
    intro: string;
    content: any;
    tags: Array<string>;
    image?: string | null;
    status: Status;
    isAuthor: boolean;
    authorFullName: string;
    createdAt: any;
    updatedAt: any;
    creator: { __typename?: 'User'; id: string };
  }> | null;
};

export type MyProjectsQueryVariables = Exact<{ [key: string]: never }>;

export type MyProjectsQuery = {
  __typename?: 'Query';
  myProjects?: Array<{
    __typename?: 'Project';
    id: string;
    title: string;
    intro: string;
    image?: string | null;
    tags: Array<string>;
    status: Status;
    siteUrl?: string | null;
    playStoreUrl?: string | null;
    githubUrl?: string | null;
    appStoreUrl?: string | null;
    content: any;
    isAuthor: boolean;
    authorFullName: string;
    createdAt: any;
    updatedAt: any;
    creator: { __typename?: 'User'; id: string };
  }> | null;
};

export type PostQueryVariables = Exact<{
  id: Scalars['String']['input'];
}>;

export type PostQuery = {
  __typename?: 'Query';
  post?: {
    __typename?: 'Post';
    id: string;
    title: string;
    intro: string;
    content: any;
    tags: Array<string>;
    image?: string | null;
    status: Status;
    isAuthor: boolean;
    authorFullName: string;
    createdAt: any;
    updatedAt: any;
    creator: { __typename?: 'User'; id: string };
  } | null;
};

export type PostIdsQueryVariables = Exact<{ [key: string]: never }>;

export type PostIdsQuery = {
  __typename?: 'Query';
  postIds?: { __typename?: 'IdsResponse'; ids?: Array<string> | null } | null;
};

export type PostStatusQueryVariables = Exact<{
  postStatusId: Scalars['String']['input'];
}>;

export type PostStatusQuery = {
  __typename?: 'Query';
  postStatus?: {
    __typename?: 'Post';
    id: string;
    status: Status;
    creator: { __typename?: 'User'; id: string };
  } | null;
};

export type PostsQueryVariables = Exact<{
  status: Status;
}>;

export type PostsQuery = {
  __typename?: 'Query';
  posts?: Array<{
    __typename?: 'Post';
    id: string;
    title: string;
    intro: string;
    content: any;
    tags: Array<string>;
    image?: string | null;
    status: Status;
    isAuthor: boolean;
    authorFullName: string;
    createdAt: any;
    updatedAt: any;
    creator: { __typename?: 'User'; id: string };
  }> | null;
};

export type ProjectQueryVariables = Exact<{
  id: Scalars['String']['input'];
}>;

export type ProjectQuery = {
  __typename?: 'Query';
  project?: {
    __typename?: 'Project';
    id: string;
    title: string;
    intro: string;
    image?: string | null;
    tags: Array<string>;
    status: Status;
    siteUrl?: string | null;
    playStoreUrl?: string | null;
    githubUrl?: string | null;
    appStoreUrl?: string | null;
    content: any;
    isAuthor: boolean;
    authorFullName: string;
    createdAt: any;
    updatedAt: any;
    creator: { __typename?: 'User'; id: string };
  } | null;
};

export type ProjectIdsQueryVariables = Exact<{ [key: string]: never }>;

export type ProjectIdsQuery = {
  __typename?: 'Query';
  projectIds?: {
    __typename?: 'IdsResponse';
    ids?: Array<string> | null;
  } | null;
};

export type ProjectsQueryVariables = Exact<{ [key: string]: never }>;

export type ProjectsQuery = {
  __typename?: 'Query';
  projects?: Array<{
    __typename?: 'Project';
    id: string;
    title: string;
    intro: string;
    image?: string | null;
    tags: Array<string>;
    status: Status;
    siteUrl?: string | null;
    playStoreUrl?: string | null;
    githubUrl?: string | null;
    appStoreUrl?: string | null;
    content: any;
    isAuthor: boolean;
    authorFullName: string;
    createdAt: any;
    updatedAt: any;
    creator: { __typename?: 'User'; id: string };
  }> | null;
};

export type RecentPostsQueryVariables = Exact<{ [key: string]: never }>;

export type RecentPostsQuery = {
  __typename?: 'Query';
  recentPosts?: Array<{
    __typename?: 'Post';
    id: string;
    title: string;
    intro: string;
    content: any;
    tags: Array<string>;
    image?: string | null;
    status: Status;
    isAuthor: boolean;
    authorFullName: string;
    createdAt: any;
    updatedAt: any;
    creator: { __typename?: 'User'; id: string };
  }> | null;
};

export type RecentProjectsQueryVariables = Exact<{ [key: string]: never }>;

export type RecentProjectsQuery = {
  __typename?: 'Query';
  recentProjects?: Array<{
    __typename?: 'Project';
    id: string;
    title: string;
    intro: string;
    image?: string | null;
    tags: Array<string>;
    status: Status;
    siteUrl?: string | null;
    playStoreUrl?: string | null;
    githubUrl?: string | null;
    appStoreUrl?: string | null;
    content: any;
    isAuthor: boolean;
    authorFullName: string;
    createdAt: any;
    updatedAt: any;
    creator: { __typename?: 'User'; id: string };
  }> | null;
};

export type SearchPostsQueryVariables = Exact<{
  query: Scalars['String']['input'];
}>;

export type SearchPostsQuery = {
  __typename?: 'Query';
  searchPosts?: Array<{
    __typename?: 'Post';
    id: string;
    title: string;
    intro: string;
    content: any;
    tags: Array<string>;
    image?: string | null;
    status: Status;
    isAuthor: boolean;
    authorFullName: string;
    createdAt: any;
    updatedAt: any;
    creator: { __typename?: 'User'; id: string };
  }> | null;
};

export type SearchProjectsQueryVariables = Exact<{
  query: Scalars['String']['input'];
}>;

export type SearchProjectsQuery = {
  __typename?: 'Query';
  searchProjects?: Array<{
    __typename?: 'Project';
    id: string;
    title: string;
    intro: string;
    image?: string | null;
    tags: Array<string>;
    status: Status;
    siteUrl?: string | null;
    playStoreUrl?: string | null;
    githubUrl?: string | null;
    appStoreUrl?: string | null;
    content: any;
    isAuthor: boolean;
    authorFullName: string;
    createdAt: any;
    updatedAt: any;
    creator: { __typename?: 'User'; id: string };
  }> | null;
};

export type UserQueryVariables = Exact<{
  userId: Scalars['String']['input'];
}>;

export type UserQuery = {
  __typename?: 'Query';
  user?: {
    __typename?: 'User';
    id: string;
    firstName: string;
    lastName: string;
    image?: string | null;
    github?: string | null;
    email?: string | null;
    bio?: string | null;
    twitter?: string | null;
    username: string;
    website?: string | null;
    createdAt: any;
    location?: string | null;
  } | null;
};

export const PostFragmentFragmentDoc = gql`
  fragment PostFragment on Post {
    id
    title
    intro
    content
    tags
    image
    status
    isAuthor
    authorFullName
    creator {
      id
    }
    createdAt
    updatedAt
  }
`;
export const ProjectFragmentFragmentDoc = gql`
  fragment ProjectFragment on Project {
    id
    title
    intro
    image
    tags
    status
    siteUrl
    playStoreUrl
    githubUrl
    appStoreUrl
    content
    isAuthor
    creator {
      id
    }
    authorFullName
    createdAt
    updatedAt
  }
`;
export const UserFragmentFragmentDoc = gql`
  fragment UserFragment on User {
    id
    firstName
    lastName
    image
    github
    email
    bio
    twitter
    username
    website
    createdAt
    location
  }
`;
export const AdminLoginDocument = gql`
  mutation AdminLogin($options: UserLoginInput!) {
    adminLogin(options: $options) {
      errors {
        message
        field
        code
      }
      user {
        ...UserFragment
        role
      }
    }
  }
  ${UserFragmentFragmentDoc}
`;

export function useAdminLoginMutation() {
  return Urql.useMutation<AdminLoginMutation, AdminLoginMutationVariables>(
    AdminLoginDocument,
  );
}
export const DeleteUserDocument = gql`
  mutation DeleteUser($deleteUserId: String!) {
    deleteUser(id: $deleteUserId)
  }
`;

export function useDeleteUserMutation() {
  return Urql.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(
    DeleteUserDocument,
  );
}
export const UpdateUserStatusDocument = gql`
  mutation UpdateUserStatus(
    $status: AccountStatus!
    $updateUserStatusId: String!
  ) {
    updateUserStatus(status: $status, id: $updateUserStatusId) {
      errors {
        code
        field
        message
      }
      user {
        ...UserFragment
      }
    }
  }
  ${UserFragmentFragmentDoc}
`;

export function useUpdateUserStatusMutation() {
  return Urql.useMutation<
    UpdateUserStatusMutation,
    UpdateUserStatusMutationVariables
  >(UpdateUserStatusDocument);
}
export const AdminPostsDocument = gql`
  query AdminPosts {
    adminPosts {
      ...PostFragment
    }
  }
  ${PostFragmentFragmentDoc}
`;

export function useAdminPostsQuery(
  options?: Omit<Urql.UseQueryArgs<AdminPostsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<AdminPostsQuery, AdminPostsQueryVariables>({
    query: AdminPostsDocument,
    ...options,
  });
}
export const UsersDocument = gql`
  query Users {
    users {
      ...UserFragment
      role
      accountStatus
    }
  }
  ${UserFragmentFragmentDoc}
`;

export function useUsersQuery(
  options?: Omit<Urql.UseQueryArgs<UsersQueryVariables>, 'query'>,
) {
  return Urql.useQuery<UsersQuery, UsersQueryVariables>({
    query: UsersDocument,
    ...options,
  });
}
export const CreatePostDocument = gql`
  mutation CreatePost($options: PostCreateInput!) {
    createPost(options: $options) {
      errors {
        code
        field
        message
      }
      post {
        ...PostFragment
      }
    }
  }
  ${PostFragmentFragmentDoc}
`;

export function useCreatePostMutation() {
  return Urql.useMutation<CreatePostMutation, CreatePostMutationVariables>(
    CreatePostDocument,
  );
}
export const CreateProjectDocument = gql`
  mutation CreateProject($options: ProjectCreateInput!) {
    createProject(options: $options) {
      errors {
        message
        field
        code
      }
      project {
        ...ProjectFragment
      }
    }
  }
  ${ProjectFragmentFragmentDoc}
`;

export function useCreateProjectMutation() {
  return Urql.useMutation<
    CreateProjectMutation,
    CreateProjectMutationVariables
  >(CreateProjectDocument);
}
export const CreateSignatureDocument = gql`
  mutation CreateSignature {
    createImageSignature {
      signature
      timestamp
    }
  }
`;

export function useCreateSignatureMutation() {
  return Urql.useMutation<
    CreateSignatureMutation,
    CreateSignatureMutationVariables
  >(CreateSignatureDocument);
}
export const DeleteAccountDocument = gql`
  mutation DeleteAccount {
    deleteAccount
  }
`;

export function useDeleteAccountMutation() {
  return Urql.useMutation<
    DeleteAccountMutation,
    DeleteAccountMutationVariables
  >(DeleteAccountDocument);
}
export const DeletePostDocument = gql`
  mutation DeletePost($id: String!) {
    deletePost(id: $id)
  }
`;

export function useDeletePostMutation() {
  return Urql.useMutation<DeletePostMutation, DeletePostMutationVariables>(
    DeletePostDocument,
  );
}
export const DeleteProjectDocument = gql`
  mutation DeleteProject($id: String!) {
    deleteProject(id: $id)
  }
`;

export function useDeleteProjectMutation() {
  return Urql.useMutation<
    DeleteProjectMutation,
    DeleteProjectMutationVariables
  >(DeleteProjectDocument);
}
export const LoginDocument = gql`
  mutation Login($options: UserLoginInput!) {
    login(options: $options) {
      errors {
        message
        field
        code
      }
      user {
        ...UserFragment
        role
      }
    }
  }
  ${UserFragmentFragmentDoc}
`;

export function useLoginMutation() {
  return Urql.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument);
}
export const LogoutDocument = gql`
  mutation Logout {
    logout
  }
`;

export function useLogoutMutation() {
  return Urql.useMutation<LogoutMutation, LogoutMutationVariables>(
    LogoutDocument,
  );
}
export const RegisterDocument = gql`
  mutation Register($options: UserRegisterInput!) {
    register(options: $options) {
      errors {
        message
        field
        code
      }
      user {
        ...UserFragment
        role
      }
    }
  }
  ${UserFragmentFragmentDoc}
`;

export function useRegisterMutation() {
  return Urql.useMutation<RegisterMutation, RegisterMutationVariables>(
    RegisterDocument,
  );
}
export const UpdatePostDocument = gql`
  mutation UpdatePost($options: PostUpdateInput!, $id: String!) {
    updatePost(options: $options, id: $id) {
      post {
        ...PostFragment
      }
      errors {
        code
        field
        message
      }
    }
  }
  ${PostFragmentFragmentDoc}
`;

export function useUpdatePostMutation() {
  return Urql.useMutation<UpdatePostMutation, UpdatePostMutationVariables>(
    UpdatePostDocument,
  );
}
export const UpdateProjectDocument = gql`
  mutation UpdateProject($options: ProjectUpdateInput!, $id: String!) {
    updateProject(options: $options, id: $id) {
      errors {
        field
        message
        code
      }
      project {
        ...ProjectFragment
      }
    }
  }
  ${ProjectFragmentFragmentDoc}
`;

export function useUpdateProjectMutation() {
  return Urql.useMutation<
    UpdateProjectMutation,
    UpdateProjectMutationVariables
  >(UpdateProjectDocument);
}
export const MeDocument = gql`
  query Me {
    me {
      ...UserFragment
      role
    }
  }
  ${UserFragmentFragmentDoc}
`;

export function useMeQuery(
  options?: Omit<Urql.UseQueryArgs<MeQueryVariables>, 'query'>,
) {
  return Urql.useQuery<MeQuery, MeQueryVariables>({
    query: MeDocument,
    ...options,
  });
}
export const MyPostsDocument = gql`
  query MyPosts {
    myPosts {
      ...PostFragment
    }
  }
  ${PostFragmentFragmentDoc}
`;

export function useMyPostsQuery(
  options?: Omit<Urql.UseQueryArgs<MyPostsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<MyPostsQuery, MyPostsQueryVariables>({
    query: MyPostsDocument,
    ...options,
  });
}
export const MyProjectsDocument = gql`
  query MyProjects {
    myProjects {
      ...ProjectFragment
    }
  }
  ${ProjectFragmentFragmentDoc}
`;

export function useMyProjectsQuery(
  options?: Omit<Urql.UseQueryArgs<MyProjectsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<MyProjectsQuery, MyProjectsQueryVariables>({
    query: MyProjectsDocument,
    ...options,
  });
}
export const PostDocument = gql`
  query Post($id: String!) {
    post(id: $id) {
      ...PostFragment
    }
  }
  ${PostFragmentFragmentDoc}
`;

export function usePostQuery(
  options: Omit<Urql.UseQueryArgs<PostQueryVariables>, 'query'>,
) {
  return Urql.useQuery<PostQuery, PostQueryVariables>({
    query: PostDocument,
    ...options,
  });
}
export const PostIdsDocument = gql`
  query PostIds {
    postIds {
      ids
    }
  }
`;

export function usePostIdsQuery(
  options?: Omit<Urql.UseQueryArgs<PostIdsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<PostIdsQuery, PostIdsQueryVariables>({
    query: PostIdsDocument,
    ...options,
  });
}
export const PostStatusDocument = gql`
  query PostStatus($postStatusId: String!) {
    postStatus(id: $postStatusId) {
      id
      creator {
        id
      }
      status
    }
  }
`;

export function usePostStatusQuery(
  options: Omit<Urql.UseQueryArgs<PostStatusQueryVariables>, 'query'>,
) {
  return Urql.useQuery<PostStatusQuery, PostStatusQueryVariables>({
    query: PostStatusDocument,
    ...options,
  });
}
export const PostsDocument = gql`
  query Posts($status: Status!) {
    posts(status: $status) {
      ...PostFragment
    }
  }
  ${PostFragmentFragmentDoc}
`;

export function usePostsQuery(
  options: Omit<Urql.UseQueryArgs<PostsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<PostsQuery, PostsQueryVariables>({
    query: PostsDocument,
    ...options,
  });
}
export const ProjectDocument = gql`
  query Project($id: String!) {
    project(id: $id) {
      ...ProjectFragment
    }
  }
  ${ProjectFragmentFragmentDoc}
`;

export function useProjectQuery(
  options: Omit<Urql.UseQueryArgs<ProjectQueryVariables>, 'query'>,
) {
  return Urql.useQuery<ProjectQuery, ProjectQueryVariables>({
    query: ProjectDocument,
    ...options,
  });
}
export const ProjectIdsDocument = gql`
  query ProjectIds {
    projectIds {
      ids
    }
  }
`;

export function useProjectIdsQuery(
  options?: Omit<Urql.UseQueryArgs<ProjectIdsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<ProjectIdsQuery, ProjectIdsQueryVariables>({
    query: ProjectIdsDocument,
    ...options,
  });
}
export const ProjectsDocument = gql`
  query Projects {
    projects {
      ...ProjectFragment
    }
  }
  ${ProjectFragmentFragmentDoc}
`;

export function useProjectsQuery(
  options?: Omit<Urql.UseQueryArgs<ProjectsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<ProjectsQuery, ProjectsQueryVariables>({
    query: ProjectsDocument,
    ...options,
  });
}
export const RecentPostsDocument = gql`
  query RecentPosts {
    recentPosts {
      ...PostFragment
    }
  }
  ${PostFragmentFragmentDoc}
`;

export function useRecentPostsQuery(
  options?: Omit<Urql.UseQueryArgs<RecentPostsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<RecentPostsQuery, RecentPostsQueryVariables>({
    query: RecentPostsDocument,
    ...options,
  });
}
export const RecentProjectsDocument = gql`
  query RecentProjects {
    recentProjects {
      ...ProjectFragment
    }
  }
  ${ProjectFragmentFragmentDoc}
`;

export function useRecentProjectsQuery(
  options?: Omit<Urql.UseQueryArgs<RecentProjectsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<RecentProjectsQuery, RecentProjectsQueryVariables>({
    query: RecentProjectsDocument,
    ...options,
  });
}
export const SearchPostsDocument = gql`
  query SearchPosts($query: String!) {
    searchPosts(query: $query) {
      ...PostFragment
    }
  }
  ${PostFragmentFragmentDoc}
`;

export function useSearchPostsQuery(
  options: Omit<Urql.UseQueryArgs<SearchPostsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<SearchPostsQuery, SearchPostsQueryVariables>({
    query: SearchPostsDocument,
    ...options,
  });
}
export const SearchProjectsDocument = gql`
  query SearchProjects($query: String!) {
    searchProjects(query: $query) {
      ...ProjectFragment
    }
  }
  ${ProjectFragmentFragmentDoc}
`;

export function useSearchProjectsQuery(
  options: Omit<Urql.UseQueryArgs<SearchProjectsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<SearchProjectsQuery, SearchProjectsQueryVariables>({
    query: SearchProjectsDocument,
    ...options,
  });
}
export const UserDocument = gql`
  query User($userId: String!) {
    user(id: $userId) {
      ...UserFragment
    }
  }
  ${UserFragmentFragmentDoc}
`;

export function useUserQuery(
  options: Omit<Urql.UseQueryArgs<UserQueryVariables>, 'query'>,
) {
  return Urql.useQuery<UserQuery, UserQueryVariables>({
    query: UserDocument,
    ...options,
  });
}
