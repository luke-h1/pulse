import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never };
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never;
    };

/* eslint-disable */
// @ts-ignore
// DO NOT EDIT
// This file is automatically generated, run pnpm gen to update

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: { input: any; output: any };
  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: any; output: any };
};

/** The status of the user account */
export enum AccountStatus {
  Active = 'ACTIVE',
  Banned = 'BANNED',
  OnHold = 'ON_HOLD',
}

/** Create new post */
export type CreatePostInput = {
  content: Scalars['JSON']['input'];
  image?: InputMaybe<Scalars['String']['input']>;
  intro: Scalars['String']['input'];
  title: Scalars['String']['input'];
};

/** Create new project */
export type CreateProjectInput = {
  appStoreUrl?: InputMaybe<Scalars['String']['input']>;
  content: Scalars['JSON']['input'];
  githubUrl?: InputMaybe<Scalars['String']['input']>;
  intro: Scalars['String']['input'];
  playStoreUrl?: InputMaybe<Scalars['String']['input']>;
  siteUrl?: InputMaybe<Scalars['String']['input']>;
  tags: Array<Scalars['String']['input']>;
  title: Scalars['String']['input'];
};

/** Follow user input */
export type FollowUserInput = {
  action?: InputMaybe<UserFollowActions>;
  userId?: InputMaybe<Scalars['ID']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create new post */
  createPost: Post;
  /** Create new project */
  createProject: Project;
  /** Delete post */
  deletePost: Post;
  /** Delete project */
  deleteProject: Project;
  /** Delete a user */
  deleteUser: User;
  /** Follow a user or unfollow a user */
  followerUser: User;
  /** Login a user */
  login: Scalars['String']['output'];
  /** Signup a user */
  signup: Scalars['String']['output'];
  /** Update a user's ban status */
  updateAccountStatus: User;
  /** Update post */
  updatePost: Post;
  /** Update project */
  updateProject: Project;
  /** Update a user's information */
  updateUser: User;
  /** Update a user's role */
  updateUserRole: User;
};

export type MutationCreatePostArgs = {
  input: CreatePostInput;
};

export type MutationCreateProjectArgs = {
  input: CreateProjectInput;
};

export type MutationDeletePostArgs = {
  id: Scalars['String']['input'];
};

export type MutationDeleteProjectArgs = {
  projectId: Scalars['String']['input'];
};

export type MutationDeleteUserArgs = {
  userId: Scalars['String']['input'];
};

export type MutationFollowerUserArgs = {
  input: FollowUserInput;
};

export type MutationLoginArgs = {
  token: Scalars['String']['input'];
};

export type MutationSignupArgs = {
  token: Scalars['String']['input'];
};

export type MutationUpdateAccountStatusArgs = {
  accountStatus: AccountStatus;
  userId: Scalars['String']['input'];
};

export type MutationUpdatePostArgs = {
  id: Scalars['String']['input'];
  input: CreatePostInput;
};

export type MutationUpdateProjectArgs = {
  input: CreateProjectInput;
  projectId: Scalars['String']['input'];
};

export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};

export type MutationUpdateUserRoleArgs = {
  role: Role;
  userId: Scalars['String']['input'];
};

/** Post */
export type Post = {
  __typename?: 'Post';
  author: User;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['Date']['output'];
  id: Scalars['ID']['output'];
  image?: Maybe<Scalars['String']['output']>;
  intro: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['Date']['output'];
};

/** Search posts input */
export type PostSearchInput = {
  cursor?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<SearchOrder>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
};

/** PostsResponse */
export type PostsResponse = {
  __typename?: 'PostsResponse';
  nextCursor?: Maybe<Scalars['String']['output']>;
  prevCursor?: Maybe<Scalars['String']['output']>;
  results: Array<Post>;
  totalCount: Scalars['Int']['output'];
};

/** Project */
export type Project = {
  __typename?: 'Project';
  appStoreUrl?: Maybe<Scalars['String']['output']>;
  author: User;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['Date']['output'];
  githubUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  image?: Maybe<Scalars['String']['output']>;
  intro: Scalars['String']['output'];
  playStoreUrl?: Maybe<Scalars['String']['output']>;
  siteUrl?: Maybe<Scalars['String']['output']>;
  slug: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  updatedAt: Scalars['Date']['output'];
};

/** ProjectsResponse */
export type ProjectsResponse = {
  __typename?: 'ProjectsResponse';
  nextCursor?: Maybe<Scalars['String']['output']>;
  prevCursor?: Maybe<Scalars['String']['output']>;
  results: Array<Project>;
  totalCount: Scalars['Int']['output'];
};

export type Query = {
  __typename?: 'Query';
  /** Get the currently authenticated user */
  currentUser: User;
  /** Get the currently authenticated user. Only available if the user has an ADMIN role */
  currentUserAsAdmin: User;
  myPosts: PostsResponse;
  /** Get currently logged in users's projects */
  myProjects: ProjectsResponse;
  /** Get post by slug */
  post: Post;
  posts: PostsResponse;
  /** Get project by slug */
  project: Project;
  /** Get all projects */
  projects: ProjectsResponse;
  /** Get a user by id */
  user: User;
  /** Get all users */
  users: UserResponse;
  /** Get all users. Only available if the user has an ADMIN role */
  usersAdmin: UsersResponse;
};

export type QueryMyPostsArgs = {
  input?: InputMaybe<PostSearchInput>;
};

export type QueryMyProjectsArgs = {
  input?: InputMaybe<SearchInput>;
};

export type QueryPostArgs = {
  slug: Scalars['String']['input'];
};

export type QueryPostsArgs = {
  input?: InputMaybe<PostSearchInput>;
};

export type QueryProjectArgs = {
  slug: Scalars['String']['input'];
};

export type QueryProjectsArgs = {
  input?: InputMaybe<SearchInput>;
};

export type QueryUserArgs = {
  id: Scalars['String']['input'];
};

export type QueryUsersAdminArgs = {
  input?: InputMaybe<SearchUsersInput>;
};

/** The role of the user */
export enum Role {
  Admin = 'ADMIN',
  User = 'USER',
}

/** Search projects input */
export type SearchInput = {
  cursor?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<SearchOrder>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
};

/** Search order */
export enum SearchOrder {
  Asc = 'asc',
  Desc = 'desc',
}

/** Search user input */
export type SearchUsersInput = {
  cursor?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<SearchOrder>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
};

/** Update user info */
export type UpdateUserInput = {
  bio: Scalars['String']['input'];
  email: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  github: Scalars['String']['input'];
  image: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  location: Scalars['String']['input'];
  twitter: Scalars['String']['input'];
  username: Scalars['String']['input'];
  website: Scalars['String']['input'];
};

/** A user */
export type User = {
  __typename?: 'User';
  accountStatus: AccountStatus;
  bio?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['Date']['output'];
  /** The email of the user */
  email?: Maybe<Scalars['String']['output']>;
  firstName: Scalars['String']['output'];
  followers?: Maybe<Array<User>>;
  followersCount: Scalars['Int']['output'];
  following?: Maybe<Array<User>>;
  followingCount: Scalars['Int']['output'];
  github?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  image?: Maybe<Scalars['String']['output']>;
  isBanned: Scalars['Boolean']['output'];
  isFollowing: Scalars['Boolean']['output'];
  isOnHold: Scalars['Boolean']['output'];
  lastName: Scalars['String']['output'];
  location?: Maybe<Scalars['String']['output']>;
  posts?: Maybe<Array<Post>>;
  projects?: Maybe<Array<Project>>;
  role: Role;
  twitter?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['Date']['output'];
  username?: Maybe<Scalars['String']['output']>;
  website?: Maybe<Scalars['String']['output']>;
};

/** User follow actions enum */
export enum UserFollowActions {
  Follow = 'FOLLOW',
  Unfollow = 'UNFOLLOW',
}

/** User response */
export type UserResponse = {
  __typename?: 'UserResponse';
  bannedUsersCount: Scalars['Int']['output'];
  onHoldUsersCount: Scalars['Int']['output'];
  results: Array<User>;
  totalCount: Scalars['Int']['output'];
};

/** Users response */
export type UsersResponse = {
  __typename?: 'UsersResponse';
  nextCursor?: Maybe<Scalars['String']['output']>;
  prevCursor?: Maybe<Scalars['String']['output']>;
  results: Array<User>;
  totalCount: Scalars['Int']['output'];
};

export type CreatePostMutationVariables = Exact<{
  input: CreatePostInput;
}>;

export type CreatePostMutation = {
  __typename?: 'Mutation';
  createPost: { __typename?: 'Post'; slug: string };
};

export type CreateProjectMutationVariables = Exact<{
  input: CreateProjectInput;
}>;

export type CreateProjectMutation = {
  __typename?: 'Mutation';
  createProject: { __typename?: 'Project'; slug: string };
};

export type DeletePostMutationVariables = Exact<{
  deletePostId: Scalars['String']['input'];
}>;

export type DeletePostMutation = {
  __typename?: 'Mutation';
  deletePost: { __typename?: 'Post'; id: string };
};

export type DeleteProjectMutationVariables = Exact<{
  projectId: Scalars['String']['input'];
}>;

export type DeleteProjectMutation = {
  __typename?: 'Mutation';
  deleteProject: { __typename?: 'Project'; id: string };
};

export type FollowerUserMutationVariables = Exact<{
  input: FollowUserInput;
}>;

export type FollowerUserMutation = {
  __typename?: 'Mutation';
  followerUser: { __typename?: 'User'; id: string };
};

export type LoginMutationVariables = Exact<{
  token: Scalars['String']['input'];
}>;

export type LoginMutation = { __typename?: 'Mutation'; login: string };

export type SignupMutationVariables = Exact<{
  token: Scalars['String']['input'];
}>;

export type SignupMutation = { __typename?: 'Mutation'; signup: string };

export type UpdatePostMutationVariables = Exact<{
  updatePostId: Scalars['String']['input'];
  input: CreatePostInput;
}>;

export type UpdatePostMutation = {
  __typename?: 'Mutation';
  updatePost: {
    __typename?: 'Post';
    id: string;
    image?: string | null;
    intro: string;
    slug: string;
    title: string;
    updatedAt: any;
    content: any;
    createdAt: any;
  };
};

export type UpdateProjectMutationVariables = Exact<{
  input: CreateProjectInput;
  projectId: Scalars['String']['input'];
}>;

export type UpdateProjectMutation = {
  __typename?: 'Mutation';
  updateProject: {
    __typename?: 'Project';
    updatedAt: any;
    title: string;
    tags: Array<string>;
    slug: string;
    siteUrl?: string | null;
    playStoreUrl?: string | null;
    intro: string;
    id: string;
    githubUrl?: string | null;
    createdAt: any;
    content: any;
    appStoreUrl?: string | null;
  };
};

export type CurrentUserQueryVariables = Exact<{ [key: string]: never }>;

export type CurrentUserQuery = {
  __typename?: 'Query';
  currentUser: {
    __typename?: 'User';
    id: string;
    firstName: string;
    lastName: string;
    email?: string | null;
    github?: string | null;
    image?: string | null;
    bio?: string | null;
    location?: string | null;
    website?: string | null;
    twitter?: string | null;
  };
};

export type MyPostsQueryVariables = Exact<{ [key: string]: never }>;

export type MyPostsQuery = {
  __typename?: 'Query';
  myPosts: {
    __typename?: 'PostsResponse';
    nextCursor?: string | null;
    prevCursor?: string | null;
    totalCount: number;
    results: Array<{
      __typename?: 'Post';
      id: string;
      title: string;
      slug: string;
      intro: string;
      updatedAt: any;
      createdAt: any;
    }>;
  };
};

export type MyProjectsQueryVariables = Exact<{
  input?: InputMaybe<SearchInput>;
}>;

export type MyProjectsQuery = {
  __typename?: 'Query';
  myProjects: {
    __typename?: 'ProjectsResponse';
    nextCursor?: string | null;
    prevCursor?: string | null;
    totalCount: number;
    results: Array<{
      __typename?: 'Project';
      appStoreUrl?: string | null;
      createdAt: any;
      githubUrl?: string | null;
      id: string;
      intro: string;
      playStoreUrl?: string | null;
      siteUrl?: string | null;
      slug: string;
      tags: Array<string>;
      title: string;
      image?: string | null;
      updatedAt: any;
    }>;
  };
};

export type PostQueryVariables = Exact<{
  slug: Scalars['String']['input'];
}>;

export type PostQuery = {
  __typename?: 'Query';
  post: {
    __typename?: 'Post';
    id: string;
    createdAt: any;
    content: any;
    image?: string | null;
    intro: string;
    slug: string;
    title: string;
    updatedAt: any;
  };
};

export type PostSlugsQueryVariables = Exact<{ [key: string]: never }>;

export type PostSlugsQuery = {
  __typename?: 'Query';
  posts: {
    __typename?: 'PostsResponse';
    results: Array<{ __typename?: 'Post'; id: string; slug: string }>;
  };
};

export type PostsQueryVariables = Exact<{ [key: string]: never }>;

export type PostsQuery = {
  __typename?: 'Query';
  posts: {
    __typename?: 'PostsResponse';
    nextCursor?: string | null;
    prevCursor?: string | null;
    results: Array<{
      __typename?: 'Post';
      id: string;
      image?: string | null;
      intro: string;
      slug: string;
      title: string;
      createdAt: any;
      content: any;
      updatedAt: any;
      author: { __typename?: 'User'; firstName: string };
    }>;
  };
};

export type ProjectQueryVariables = Exact<{
  slug: Scalars['String']['input'];
}>;

export type ProjectQuery = {
  __typename?: 'Query';
  project: {
    __typename?: 'Project';
    appStoreUrl?: string | null;
    content: any;
    createdAt: any;
    githubUrl?: string | null;
    id: string;
    intro: string;
    playStoreUrl?: string | null;
    siteUrl?: string | null;
    slug: string;
    title: string;
    tags: Array<string>;
    updatedAt: any;
    image?: string | null;
    author: { __typename?: 'User'; firstName: string; lastName: string };
  };
};

export type ProjectSlugsQueryVariables = Exact<{ [key: string]: never }>;

export type ProjectSlugsQuery = {
  __typename?: 'Query';
  projects: {
    __typename?: 'ProjectsResponse';
    results: Array<{ __typename?: 'Project'; id: string; slug: string }>;
  };
};

export type ProjectsQueryVariables = Exact<{ [key: string]: never }>;

export type ProjectsQuery = {
  __typename?: 'Query';
  projects: {
    __typename?: 'ProjectsResponse';
    nextCursor?: string | null;
    prevCursor?: string | null;
    results: Array<{
      __typename?: 'Project';
      appStoreUrl?: string | null;
      content: any;
      createdAt: any;
      githubUrl?: string | null;
      id: string;
      intro: string;
      playStoreUrl?: string | null;
      siteUrl?: string | null;
      slug: string;
      tags: Array<string>;
      title: string;
      image?: string | null;
      updatedAt: any;
      author: {
        __typename?: 'User';
        id: string;
        image?: string | null;
        firstName: string;
        lastName: string;
      };
    }>;
  };
};

export type UserQueryVariables = Exact<{
  userId: Scalars['String']['input'];
}>;

export type UserQuery = {
  __typename?: 'Query';
  user: {
    __typename?: 'User';
    bio?: string | null;
    createdAt: any;
    email?: string | null;
    firstName: string;
    github?: string | null;
    id: string;
    image?: string | null;
    lastName: string;
    location?: string | null;
    twitter?: string | null;
    updatedAt: any;
    username?: string | null;
    website?: string | null;
  };
};

export type UserSlugsQueryVariables = Exact<{ [key: string]: never }>;

export type UserSlugsQuery = {
  __typename?: 'Query';
  users: {
    __typename?: 'UserResponse';
    results: Array<{
      __typename?: 'User';
      id: string;
      username?: string | null;
    }>;
  };
};

export type UsersQueryVariables = Exact<{ [key: string]: never }>;

export type UsersQuery = {
  __typename?: 'Query';
  users: {
    __typename?: 'UserResponse';
    totalCount: number;
    results: Array<{
      __typename?: 'User';
      bio?: string | null;
      firstName: string;
      email?: string | null;
      createdAt: any;
      github?: string | null;
      id: string;
      image?: string | null;
      lastName: string;
      location?: string | null;
      twitter?: string | null;
      username?: string | null;
      website?: string | null;
      updatedAt: any;
    }>;
  };
};

export const CreatePostDocument = gql`
  mutation CreatePost($input: CreatePostInput!) {
    createPost(input: $input) {
      slug
    }
  }
`;

export function useCreatePostMutation() {
  return Urql.useMutation<CreatePostMutation, CreatePostMutationVariables>(
    CreatePostDocument,
  );
}
export const CreateProjectDocument = gql`
  mutation CreateProject($input: CreateProjectInput!) {
    createProject(input: $input) {
      slug
    }
  }
`;

export function useCreateProjectMutation() {
  return Urql.useMutation<
    CreateProjectMutation,
    CreateProjectMutationVariables
  >(CreateProjectDocument);
}
export const DeletePostDocument = gql`
  mutation DeletePost($deletePostId: String!) {
    deletePost(id: $deletePostId) {
      id
    }
  }
`;

export function useDeletePostMutation() {
  return Urql.useMutation<DeletePostMutation, DeletePostMutationVariables>(
    DeletePostDocument,
  );
}
export const DeleteProjectDocument = gql`
  mutation DeleteProject($projectId: String!) {
    deleteProject(projectId: $projectId) {
      id
    }
  }
`;

export function useDeleteProjectMutation() {
  return Urql.useMutation<
    DeleteProjectMutation,
    DeleteProjectMutationVariables
  >(DeleteProjectDocument);
}
export const FollowerUserDocument = gql`
  mutation FollowerUser($input: FollowUserInput!) {
    followerUser(input: $input) {
      id
    }
  }
`;

export function useFollowerUserMutation() {
  return Urql.useMutation<FollowerUserMutation, FollowerUserMutationVariables>(
    FollowerUserDocument,
  );
}
export const LoginDocument = gql`
  mutation Login($token: String!) {
    login(token: $token)
  }
`;

export function useLoginMutation() {
  return Urql.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument);
}
export const SignupDocument = gql`
  mutation Signup($token: String!) {
    signup(token: $token)
  }
`;

export function useSignupMutation() {
  return Urql.useMutation<SignupMutation, SignupMutationVariables>(
    SignupDocument,
  );
}
export const UpdatePostDocument = gql`
  mutation UpdatePost($updatePostId: String!, $input: CreatePostInput!) {
    updatePost(id: $updatePostId, input: $input) {
      id
      image
      intro
      slug
      title
      updatedAt
      content
      createdAt
    }
  }
`;

export function useUpdatePostMutation() {
  return Urql.useMutation<UpdatePostMutation, UpdatePostMutationVariables>(
    UpdatePostDocument,
  );
}
export const UpdateProjectDocument = gql`
  mutation UpdateProject($input: CreateProjectInput!, $projectId: String!) {
    updateProject(input: $input, projectId: $projectId) {
      updatedAt
      title
      tags
      slug
      siteUrl
      playStoreUrl
      intro
      id
      githubUrl
      createdAt
      content
      appStoreUrl
    }
  }
`;

export function useUpdateProjectMutation() {
  return Urql.useMutation<
    UpdateProjectMutation,
    UpdateProjectMutationVariables
  >(UpdateProjectDocument);
}
export const CurrentUserDocument = gql`
  query CurrentUser {
    currentUser {
      id
      firstName
      lastName
      email
      github
      image
      bio
      location
      website
      twitter
    }
  }
`;

export function useCurrentUserQuery(
  options?: Omit<Urql.UseQueryArgs<CurrentUserQueryVariables>, 'query'>,
) {
  return Urql.useQuery<CurrentUserQuery, CurrentUserQueryVariables>({
    query: CurrentUserDocument,
    ...options,
  });
}
export const MyPostsDocument = gql`
  query MyPosts {
    myPosts {
      nextCursor
      prevCursor
      totalCount
      results {
        id
        title
        slug
        intro
        updatedAt
        createdAt
      }
    }
  }
`;

export function useMyPostsQuery(
  options?: Omit<Urql.UseQueryArgs<MyPostsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<MyPostsQuery, MyPostsQueryVariables>({
    query: MyPostsDocument,
    ...options,
  });
}
export const MyProjectsDocument = gql`
  query MyProjects($input: SearchInput) {
    myProjects(input: $input) {
      nextCursor
      prevCursor
      totalCount
      results {
        appStoreUrl
        createdAt
        githubUrl
        id
        intro
        playStoreUrl
        siteUrl
        slug
        tags
        title
        image
        updatedAt
      }
    }
  }
`;

export function useMyProjectsQuery(
  options?: Omit<Urql.UseQueryArgs<MyProjectsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<MyProjectsQuery, MyProjectsQueryVariables>({
    query: MyProjectsDocument,
    ...options,
  });
}
export const PostDocument = gql`
  query Post($slug: String!) {
    post(slug: $slug) {
      id
      createdAt
      content
      image
      intro
      slug
      title
      updatedAt
    }
  }
`;

export function usePostQuery(
  options: Omit<Urql.UseQueryArgs<PostQueryVariables>, 'query'>,
) {
  return Urql.useQuery<PostQuery, PostQueryVariables>({
    query: PostDocument,
    ...options,
  });
}
export const PostSlugsDocument = gql`
  query PostSlugs {
    posts {
      results {
        id
        slug
      }
    }
  }
`;

export function usePostSlugsQuery(
  options?: Omit<Urql.UseQueryArgs<PostSlugsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<PostSlugsQuery, PostSlugsQueryVariables>({
    query: PostSlugsDocument,
    ...options,
  });
}
export const PostsDocument = gql`
  query Posts {
    posts {
      nextCursor
      prevCursor
      results {
        id
        author {
          firstName
        }
        image
        intro
        slug
        title
        createdAt
        id
        content
        updatedAt
      }
    }
  }
`;

export function usePostsQuery(
  options?: Omit<Urql.UseQueryArgs<PostsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<PostsQuery, PostsQueryVariables>({
    query: PostsDocument,
    ...options,
  });
}
export const ProjectDocument = gql`
  query Project($slug: String!) {
    project(slug: $slug) {
      appStoreUrl
      content
      createdAt
      githubUrl
      id
      intro
      playStoreUrl
      siteUrl
      slug
      title
      tags
      updatedAt
      image
      author {
        firstName
        lastName
      }
    }
  }
`;

export function useProjectQuery(
  options: Omit<Urql.UseQueryArgs<ProjectQueryVariables>, 'query'>,
) {
  return Urql.useQuery<ProjectQuery, ProjectQueryVariables>({
    query: ProjectDocument,
    ...options,
  });
}
export const ProjectSlugsDocument = gql`
  query ProjectSlugs {
    projects {
      results {
        id
        slug
      }
    }
  }
`;

export function useProjectSlugsQuery(
  options?: Omit<Urql.UseQueryArgs<ProjectSlugsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<ProjectSlugsQuery, ProjectSlugsQueryVariables>({
    query: ProjectSlugsDocument,
    ...options,
  });
}
export const ProjectsDocument = gql`
  query Projects {
    projects {
      nextCursor
      prevCursor
      results {
        appStoreUrl
        author {
          id
          image
          firstName
          lastName
        }
        content
        createdAt
        githubUrl
        id
        intro
        playStoreUrl
        siteUrl
        slug
        tags
        title
        image
        updatedAt
      }
    }
  }
`;

export function useProjectsQuery(
  options?: Omit<Urql.UseQueryArgs<ProjectsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<ProjectsQuery, ProjectsQueryVariables>({
    query: ProjectsDocument,
    ...options,
  });
}
export const UserDocument = gql`
  query User($userId: String!) {
    user(id: $userId) {
      bio
      createdAt
      email
      firstName
      github
      id
      image
      lastName
      location
      twitter
      updatedAt
      username
      website
    }
  }
`;

export function useUserQuery(
  options: Omit<Urql.UseQueryArgs<UserQueryVariables>, 'query'>,
) {
  return Urql.useQuery<UserQuery, UserQueryVariables>({
    query: UserDocument,
    ...options,
  });
}
export const UserSlugsDocument = gql`
  query UserSlugs {
    users {
      results {
        id
        username
      }
    }
  }
`;

export function useUserSlugsQuery(
  options?: Omit<Urql.UseQueryArgs<UserSlugsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<UserSlugsQuery, UserSlugsQueryVariables>({
    query: UserSlugsDocument,
    ...options,
  });
}
export const UsersDocument = gql`
  query Users {
    users {
      totalCount
      results {
        bio
        firstName
        email
        createdAt
        github
        id
        image
        lastName
        location
        twitter
        username
        website
        updatedAt
      }
    }
  }
`;

export function useUsersQuery(
  options?: Omit<Urql.UseQueryArgs<UsersQueryVariables>, 'query'>,
) {
  return Urql.useQuery<UsersQuery, UsersQueryVariables>({
    query: UsersDocument,
    ...options,
  });
}
